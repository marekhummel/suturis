"""
Stub file for cv2 containing all things used in suturis. Sadly python / mypy only allow for 
stub overriding, not extension, meaning that when this file is put into the src folder,
while all functions are type annotated, all docstrings are missing and all other functions and
members are unknown, which is difficult when working with autocomplete and stuff.
"""


import numpy.typing as npt

InputArray = npt.NDArray
OutputArray = npt.NDArray
InputOutputArray = npt.NDArray | None
Mat = npt.NDArray
Size = tuple[int, int]
Scalar = None | float | tuple[float, ...]

class VideoCapture: 
    def __init__(self, filename: str) -> None: ...
    def isOpened(self) -> bool: ...
    def get(self, propId: int) -> float: ...
    def read(self) -> tuple[bool, OutputArray]: ...
class VideoWriter: 
    def __init__(self, filename: str, fourcc: int, fps: float, frameSize: Size, isColor: bool = ...) -> None: ...
    def write(self, image: InputArray) -> None: ...
class ORB:
    def detectAndCompute(self, image: InputArray, mask: InputArray | None, useProvidedKeypoints: bool = ...) -> tuple[list[KeyPoint], OutputArray]: ...
class SIFT: 
    def detectAndCompute(self, image: InputArray, mask: InputArray | None, useProvidedKeypoints: bool = ...) -> tuple[list[KeyPoint], OutputArray]: ...
class BFMatcher: 
    def knnMatch(self, queryDescriptors: InputArray, trainDescriptors: InputArray, k: int, mask: InputArray | None = ..., compactResult: bool = ...) -> list[list[DMatch]]: ...
    def match(self, queryDescriptors: InputArray, trainDescriptors: InputArray, mask: InputArray | None = ...,) -> list[DMatch]: ... 
class KeyPoint: 
    pt: tuple[float, float]
class DMatch:
    queryIdx: int
    trainIdx: int
    distance: float

def addWeighted(src1: InputArray, alpha: float, src2: InputArray, beta: float, gamma: float, dtype: int = ...) -> OutputArray: ...
def BFMatcher_create(normType: int = ..., crossCheck: bool = ...) -> BFMatcher: ...
def cvtColor(src: InputArray, code: int, dstCn: int = ...) -> OutputArray: ...
def drawKeypoints(image: InputArray, keypoints: list[KeyPoint], outImage: InputOutputArray, color: Scalar = ..., flags: int = ...) -> OutputArray: ...
def drawMatches(img1: InputArray, keypoints1: list[KeyPoint], img2: InputArray, keypoints2: list[KeyPoint], matches1to2: list[DMatch], outImg: InputOutputArray, matchColor: Scalar = ..., singlePointColor: Scalar = ..., matchesMask: str = ..., flags: int = ...) -> OutputArray: ...
def findHomography(srcPoints: InputArray, dstPoints: InputArray, method: int = ..., ransacReprojThreshold: float = ..., maxIters: int = ..., confidence: float = ...) -> tuple[Mat, OutputArray]: ...
def GaussianBlur(src: InputArray, ksize: Size, sigmaX: float, sigmaY: float = ..., borderType: int = ...) -> OutputArray: ...
def getRotationMatrix2D(center: tuple[float, float], angle: float, scale: float) -> Mat: ...
def imshow(winname: str, mat: InputArray) -> None: ...
def inpaint(src: InputArray, inpaintMask: InputArray, inpaintRadius: float, flags: int) -> OutputArray: ...
def imwrite(filename: str, img: InputArray, params: list[int] = ...) -> bool: ...
def namedWindow(name: str, flags: int = ...) -> None: ...
def ORB_create(nfeatures: int = ..., scaleFactor: float = ..., nlevels: int = ..., edgeThreshold: int = ..., firstLevel: int = ..., WTA_K: int = ..., scoreType: int = ..., patchSize: int = ..., fastThreshold: int = ...) -> ORB: ...
def perspectiveTransform(src: InputArray, m: InputArray) -> OutputArray: ...
def resize(src: InputArray, dsize: Size, fx: float = ..., fy: float = ..., interpolation: int = ...) -> InputArray: ...
def SIFT_create(nfeatures: int = ..., nOctaveLayer: int = ..., contrastThreshold: float = ..., edgeThreshold: float = ..., sigma: float = ..., descriptorType: int = ...) -> SIFT: ...
def VideoWriter_fourcc(c1: str, c2: str, c3: str, c4: str) -> int: ...
def waitKey(delay: int = ...) -> int: ...
def warpAffine(src: InputArray, M: InputArray, dsize: Size, flags: int = ..., borderMode: int = ..., borderValue: int = ...) -> OutputArray: ...
def warpPerspective(src: InputArray, m: InputArray, dsize: Size, flags: int = ..., borderMode: int = ..., borderValue: float = ...) -> OutputArray: ...

CAP_PROP_FPS: int
INTER_CUBIC: int
NORM_HAMMING: int
RANSAC: int
BORDER_REPLICATE: int
INPAINT_TELEA: int
DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS: int
NORM_L2: int
COLOR_BGR2Lab: int